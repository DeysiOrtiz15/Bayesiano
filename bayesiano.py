# -*- coding: utf-8 -*-
"""Bayesiano.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHtf9SfI4N3ajF7oN9lGweAVKEZ6nk7U
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

from matplotlib import colors
# %matplotlib inline

plt.rcParams['figure.figsize'] = (20, 9)
plt.style.use('ggplot')

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.feature_selection import SelectKBest

df_data = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSV6ewaQGa2g4xHbFZ8SWEMjoZW9xHF18F0vL8hWi81omlZEI01ni9eXzuBQ_r0c7ht5Fo-NorpqMKh/pub?gid=1261069922&single=true&output=csv')
df_data.head()

print(df_data.groupby('comprar').size())

df_data.drop(['comprar'], axis=1).hist()
plt.show()

df_data['gastos'] = (df_data['gastos_comunes']+df_data['gastos_otros']+df_data['pago_coche'])
df_data['financiar'] = df_data['vivienda']-df_data['ahorros']
df_data.drop(['gastos_comunes', 'gastos_otros', 'pago_coche'], axis=1).head(10)

reduced = df_data.drop(['gastos_comunes', 'gastos_otros', 'pago_coche'], axis=1)
reduced.describe()

x = df_data.drop(['comprar'], axis=1)
y = df_data['comprar']

best=SelectKBest(k=5)
x_new=best.fit_transform(x,y)
x_new.shape
selected = best.get_support(indices=True)
print(x.columns[selected])

used_features = x.columns[selected]

colormap = plt.cm.viridis
plt.figure(figsize=(12,12))
plt.title('Correlacion de caracteristicas de Person', y=1.05, size=15)
sns.heatmap(df_data[used_features].astype(float).corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)

x_train, x_test = train_test_split(df_data, test_size=0.2, random_state=5)
y_train = x_train['comprar']
y_test = x_test['comprar']

bayes_naive= GaussianNB()
bayes_clasif=bayes_naive.fit(x_train[used_features].values,y_train)
y_pred=bayes_naive.predict(x_test[used_features])

print(bayes_naive.predict([[2000,5000,0,5,2000000],[6000,34000,2,5,320000]]))